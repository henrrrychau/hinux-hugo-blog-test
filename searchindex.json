{"categories":[],"posts":[{"content":"因為做項目需要,就學了一些MySQL.也不想把太多的東西記在腦子里,所以就在這裡做一些學習小筆記\nBasic Info System: Ubuntu 19.10\nInstallation 例行升級\nsudo apt update \u0026amp;\u0026amp; sudo apt upgrade -y  安裝mysql server\nsudo apt install mysql-server  這一步很重要，之前老是忘掉 安全安裝\nsudo mysql_secure_installation  然後輸入你的登入密碼，接下來那四個基本上都是y\n然後查看mysql的運行狀況\nsudo systemctl status mysql #系統開機啟動 sudo systemctl enable mysql  連結到MySQL server\nsudo mysql -u root -p #如果看到mysql\u0026gt;的話就成功了 mysql\u0026gt; show databases; +--------------------+ | Database | +--------------------+ | information_schema | | mysql | | performance_schema | | sys | +--------------------+ 4 rows in set (0.05 sec)  Cheat Sheet    What to achieve Command Reference     創建新用戶 CREATE USER \u0026lsquo;user\u0026rsquo;@\u0026lsquo;localhost\u0026rsquo;;   給用戶分配權限 GRANT [ALL PRIVILEGES]/[SELECT, INSERT, DELETE] ON data_basename.* TO \u0026lsquo;username\u0026rsquo;@\u0026lsquo;localhost\u0026rsquo;;   撤銷用戶權限 REVOKE [ALL PRIVILEGES(僅一項權限)]/[GRANT OPTION(所有權限)] ON data_basename.* FROM \u0026lsquo;username\u0026rsquo;@\u0026lsquo;localhost\u0026rsquo;;   刷新privileges緩衝區 FLUSH PRIVILEGES;   創建table CREATE TABLE events( id int auto_increment primary key, event_name varchat(255), visitor varchar(255), properties json )   插入數據 INSERT INTO events(properties) VALUE ('{\u0026ldquo;type\u0026rdquo;:{\u0026lsquo;THIS IS TEST JSON\u0026rsquo;}}')   删除表 DROP TABLE events    ","id":0,"section":"posts","summary":"因為做項目需要,就學了一些MySQL.也不想把太多的東西記在腦子里,所以就在這裡做一些學習小筆記 Basic Info System: Ubuntu 19.10 Installation 例行升級 sudo apt update \u0026amp;\u0026amp; sudo apt upgrade -y 安裝my","tags":["工具"],"title":"MySQL 筆記","uri":"https://hinwai.top/2020/10/mysql/","year":"2020"},{"content":"真的太折磨王了\n先上info 型号：树莓派 Zero（无WIFI模块）\n系统：Ubuntu\n安装系统 直接点我选系统\n这里我选择了没有桌面的Raspbian-Lite版，因为zero的性能本来也不怎么样，简简单单才是真233333。\n把SD卡插到读卡器上，连接到电脑\n这里可以参照dd制作bootable disc的那篇文章来进行安装，只不过将ubuntu换成raspbian的img而已。\n安装完之后进入boot分区，修改config.txt文件，在文件最尾部换行加上dtoverlay=dwc2，再修改cmdline.txt文件，在rootwait后面加上modules-load=dwc2,g_ether。\n透过USB Ethernet将Pi Zero和电脑连起来 这里假设你已经安装好系统了，下一步就是配置USB Ethernet连接了。\nPi Zero有两个口，一个是连USB（带OTG功能）的，一个是单纯充电的PWR_IN口，只需要用资料线通过USB口和电脑给连接起来就好了（两个口都有供电功能）。\n插上之后右上角应该会有一个USB Ethernet Connecting的东西，点进去选择Wired Settings-\u0026gt;USB Ethernet的那个齿轮图标-\u0026gt;将IPv4和IPv6都改成Link Local-only，这样就能通过USB Ethernet连接到电脑了。\n这里插句题外话：\nWindows10下需要安装RNDIS服务（点我下载驱动）和Bonjour服务才能识别到Pi Zero，否则插USB（数据线！不是充电线）只会识别成COM设备。\n由于RNDIS驱动程式没有数字签名，需要按照以下步骤禁用数字签名校验：\n1.屏幕右下角点击小图标托盘隔壁的“通知”图标-\u0026gt;“所有设置”-\u0026gt;“更新和安全” 2.找到恢复-\u0026gt;点击“高级启动”下的“立即重启”重启电脑 3.重启后选择“疑难解答”-\u0026gt;“高级选项”-\u0026gt;“启动设置”-\u0026gt;点击“重启” 4.开机的时候狂按F7以禁用驱动程序强制签名。（会弹出一个框大概问你是否继续安装，这时候点继续就好了）  替换RNDIS驱动的部位就选择设备管理器中新识别出来的COM设备那里，右键更新驱动然后选择从电脑上安装，再选中下载好的那个inf文件就好了。\n至于苹果的Bonjour服务（Mac是自带这个服务的）可以点这里直接下载\nSSH登入Pi Zero 这时候USB Ethernet已经连接成功了，默认的域名为raspberrypi.local，可以在terminal里ping一下raspberrypi.local域名看看能不能resolve成功，如果解析失败的话可以重启一下电脑。\n如果能ping通的话说明电脑和pi zero是可以建立网路连结的，直接入了它（指SSH登入别想多了哈哈哈哈🤣）\nyou@your_pc: $ ssh pi@raspberrypi.local pi@raspberrypi.locals password:#默认密码是raspberry Linux raspberrypi 5.4.51+ #1333 Mon Aug 10 16:38:02 BST 2020 armv6l The programs included with the Debian GNU/Linux system are free software; the exact distribution terms for each program are described in the individual files in /usr/share/doc/*/copyright. Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent permitted by applicable law. Last login: Fri Oct 9 15:43:05 2020 from 169.254.7.185 pi@raspberrypi:~ $ #看到这个的话就说明成功啦！  换源 打开/etc/apt/sources.list 将源地址换成清华大学的http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/\n然后打开/etc/apt/sources.list.d/raspi.list 将系统源换成http://mirrors.tuna.tsinghua.edu.cn/raspberrypi/\n因为Pi Zero本身不自带Wifi模块，只能通过usb和电脑共享网络（当然你也可以买一个RJ45/USB口转换器接到路由器上）。在Windows10下，可以在网络适配器页面，按Ctrl将具有Internet连接的适配器和RNDIS Gadget适配器都选上，然后右键桥接。\n","id":1,"section":"posts","summary":"真的太折磨王了 先上info 型号：树莓派 Zero（无WIFI模块） 系统：Ubuntu 安装系统 直接点我选系统 这里我选择了没有桌面的Raspbia","tags":null,"title":"折騰Raspberry Pi Zero日記","uri":"https://hinwai.top/2020/10/raspberrypi/","year":"2020"},{"content":"用了下別人的軟件，亦想過自己實現。\ndd 永远滴神!! dd是disk dump的缩写，也有人称之为disk destroyer（调侃23333）。相比起来我更喜欢后者，因为dd确实太强大了\n以至于有些安全部门在销毁硬盘数据的时候都在用这玩意儿。\n那么如何用dd来做bootable disc呢？ 这里假设我们想要装ubuntu-19.10系统的iso到U盘上 首先\n确保你的iso文件是可引导的 具体操作：\n$ file ubuntu-19.10-desktop-amd64.iso ubuntu-19.10-desktop-amd64.iso: DOS/MBR boot sector; partition 2 : ID=0xef, start-CHS (0x3ff,254,63), end-CHS (0x3ff,254,63), startsector 4073124, 7936 sectors  如果没有显示DOS/MBR bootsector等信息的话就说明这个iso不是hybrid iso，也就是无法直接烧写到U盘中并进行引导\n这时候可以用isohybrid等工具使之变成可以直接引导的hybrid iso（如上方的ubuntu-19.10-desktop-amd64.iso就是一个hybrid iso）\n查看u盘的路径（？我也不知道叫啥好） $ df -h  然后会显示/dev/sdc1,/dev/sdc2等类似于/dev/sdXn之类的东西\n其中sdc的c用于表示硬盘序号，你本机的硬盘可以是，而1表示这是1号partition（分区）\n卸载sdc的已挂载分区 我直接偷懒了\n$ sudo umount /dev/sdc*  表示卸载所有的已经挂载的分区 这里如果不umount的话dd会提示device busy错误\n格式化U盘（也就是重构文件系统） $ sudo mkfs.vfat -I /dev/sdc  -I表示强制把原本已有的文件系统override成fat\n最重要的一步！dd写iso $ sudo dd if=/path/to/ubuntu-19.10-desktop-amd64.iso of=/dev/sdc status=progress \u0026amp;\u0026amp; sync  写入的过程会点久，泡杯茶叹下世界慢慢等一下吧23333\n这里的sync很重要，一开始就是没有写这个 \u0026amp;\u0026amp; sync导致写少了东西到U盘上从而引导失败\n系统会将很快地将数据先写到读写速度相对高速的内核缓冲区（cache）中，然后相对拖拉一点的U盘慢悠悠从这个cache中读数据\n但有时候kernel还没有把cache中的数据完全写进U盘里面，这时候就需要sync来flush掉这个cache\n等sync完毕之后eject弹出就好了\n","id":2,"section":"posts","summary":"用了下別人的軟件，亦想過自己實現。 dd 永远滴神!! dd是disk dump的缩写，也有人称之为disk destroyer（调侃23333）。相比","tags":["工具"],"title":"dd製作bootable disc","uri":"https://hinwai.top/2020/10/dd/","year":"2020"},{"content":"TCP的過程 三次握手： client向伺服器發送SYN請求建立TCP連結（伺服器確認客戶端的發送能力和伺服器接收能力是正常的）\n伺服器回覆SYN-ACK給client表示收到請求（client認為伺服器發送和接受能力正常，此外client收到伺服器的echo，說明自己的發送接受能力亦正常） client向伺服器發送ACK 成功建立連結（client接受發送能力正常，伺服器接受發送能力亦正常 可以建立連結） 關於TCP四次揮手的一個自編小故事 有两个诗人client和server client要离开了 于是发一个fin和seq=x的包给server 然后进入fin_wait_1状态 此时client已经没有数据发给server了 但仍然可以接受数据\n（诗人client：我先走了 但仍然还没走 不知道server有什么要说的）\nserver收到fin之后发一个ack和seq=x+1给server表示“收到”并“同意”client结束连接的请求\n（诗人server：好的）\n中间server可能还有没法完的数据要发给client 就在这个间隙发送 好比一个朋友和你说再见之后你说先别走然后唠嗑了一点叮嘱\n（诗人server：先别走 记得保重身体blahblahblah……）\nserver完成送礼/叮嘱后发送一个fin和seq=y “西出阳关无故人” 并祝client一路顺风进入last_ack状态\n（诗人server：你去吧 慢走）\nclient收到最后一个fin之后 再发一个ack给server告诉他“收到了，你回去吧，天色晚了”\nserver收到ack后 便不舍地离去 关闭连接进入CLOSED状态 client见到server不见后 亦使得连接CLOSED 上马向落日余晖走去\n","id":3,"section":"posts","summary":"TCP的過程 三次握手： client向伺服器發送SYN請求建立TCP連結（伺服器確認客戶端的發送能力和伺服器接收能力是正常的） 伺服器回覆SYN","tags":null,"title":"TCP四次揮手","uri":"https://hinwai.top/2020/10/tcp_goodbye/","year":"2020"},{"content":"有一段时间没更blog了，之前一直都没时间写，害。。。\n今天堂姐结婚，可惜学校只有四天的假期（就这？四天怎么够表达我对祖国母亲生日的激动之情啊🙄），刚好周一又没有课，于是我强行+1s续了一波假期硬是拖到今天才回学(cun)校(li)（内心写着一万个不愿意55555555 T_T）\n顺便祝堂姐百年好合早生贵子吧哈哈哈哈哈哈😀\n折腾Maven 回到学校之后，换了个衣服，吃了个午饭，就开始一头扎进Maven的文档里。配置和使用的过程也并不是那么一帆风顺，这里记录一下使用中遇到的一些问题（不知道以后会不会遇到另一些奇奇怪怪的问题，这里的问题是暂时碰到的，以后不定期更新遇到的问题解决方案）\n老生常谈的Mirror问题 装上maven之后，我在终端里输入了\n$ cd projects/ $ mvn archetype:generate  尝试通过最朴素的interactive模式来创建一个很naive的maven project，结果发现下载速度不太对劲儿，下一个4.7mb的包都下了好久，直觉告诉我应该是天朝自有国情在的问题拦住我了。\n于是google了一下 看看能不能改掉镜像（PS:按照Maven里面的说法应该叫repository，平时下artifact的那个大仓库应该叫“中央仓库”central repository）\n于是搜了一下maven的官方文档 又google了一下，发现国内一般用阿里云Maven仓库（url为https://maven.aliyun.com/repository/public)\n于是愉快地打开终端 输入：\n$ cd /home/user_name/.m2/ $ nano settings.xml #因为这个settings.xml一开始是不存在的，要自行创建  然后在nano里面输入\n\u0026lt;settings\u0026gt; \u0026lt;mirrors\u0026gt; \u0026lt;mirror\u0026gt; \u0026lt;id\u0026gt;aliyun-mirror\u0026lt;/id\u0026gt; \u0026lt;name\u0026gt;Aliyun Maven Repo\u0026lt;/name\u0026gt; \u0026lt;url\u0026gt;https://maven.aliyun.com/repository/public\u0026lt;/url\u0026gt; \u0026lt;mirrorOf\u0026gt;*\u0026lt;/mirrorOf\u0026gt; #代表全部仓库都走阿里云maven仓库镜像 \u0026lt;/mirror\u0026gt; \u0026lt;/mirrors\u0026gt; \u0026lt;/settings\u0026gt;  其中这里的mirrorOf默认是central，也就是说这个仓库是id为central的镜像站。如果要从id不是central的仓库中下载其他artifact则会跑到各自对应id的镜像站上下载（PS：一个mirrorOf最多对应一个id，如果出现一对多的情况则只取第一个match，其他的match则会被丢弃）\njar文件找不到main class的问题 今天写了个小hello world，结果发现编译出来的jar跑不了\n$ maven archetype:generate #......(omitted) $ mvn package $ java -jar target/noobapp-1.0.jar no main manifest attribute, in target/noobapp-1.0.jar  看了一下文档，发现原来jar文件需要手动指定Main-Class入口点\n于是找到了两种解决方法（假设我们的noobapp-1.0入口点包含在noobpkg这个包里面的App.java）：\n1. 在Windows下以压缩包形式打开.jar，修改MANIFEST FILE，将里面Main Class:后面的内容更改称noobpkg.App\n2. 直接手动指定入口点java -cp target/noobapp-1.0.jar noobpkg.App\n","id":4,"section":"posts","summary":"有一段时间没更blog了，之前一直都没时间写，害。。。 今天堂姐结婚，可惜学校只有四天的假期（就这？四天怎么够表达我对祖国母亲生日的激动之情啊","tags":["工具"],"title":"關於Maven的一些東西（不定期更）","uri":"https://hinwai.top/2020/10/maven/","year":"2020"},{"content":"两百多天的家里蹲大学生活可算是告一段落了，然而一部大型灾难片即将上映！\n《开學！》 由于疫情的原因，你校采用了封闭式管理措施。（这怎么能叫封闭式管理？学生可以进，教职工及其子女社会人员等可以进出。这样的灵活管理措施实在是太厉害🌶（）\n话不多说，直接进入正题 今天突然发现vscode的python intellisense插件显示不了import后面的包内容了。\n而且好像是interpreter选择了\u0026gt;=python3.7的时候没法工作，用回python2.7就可以了。\n上stackoverflow找到的回答以及官方文档中找到的解决方案，很多都只是说添加extra path中的包路径。我也这么照做了但好像并不怎么管用。\n最终解决方案 这里我发现在安装了Python插件之后再安装Pylance插件就能完美工作了。\n","id":5,"section":"posts","summary":"两百多天的家里蹲大学生活可算是告一段落了，然而一部大型灾难片即将上映！ 《开學！》 由于疫情的原因，你校采用了封闭式管理措施。（这怎么能叫封闭式","tags":["疑难杂症"],"title":"Vscode的python插件突然无法识别import的解决方案","uri":"https://hinwai.top/2020/09/new-term/","year":"2020"},{"content":"Docker是什麼 Docker中文翻译为\u0026quot;码头搬运工人\u0026rdquo;，是一个开源软件。 Docker容器与虚拟机类似，但二者在原理上不同。容器是OS-level virtualization，而虚拟机则是将硬件虚拟化，因此容器更被视为软件的一个标准化单元（个人理解就相当于一个小胶囊，里面裹着一个软件所需要的环境。这个小胶囊可以不依赖外部环境独立运行，从而避免产生一些奇奇怪怪的库问题。）\n國內Docker鏡像加速站 天朝自有国情在\n在国内使用官方提供的mirror会经常出现掉线等情况。\n这里列举了一些国内的docker镜像站：\nDocker国内官方镜像:https://registry.docker-cn.com\n网易:http://hub-mirror.c.163.com\n阿里云:https://3laho3y3.mirror.aliyuncs.com\nDaoCloud:http://f1361db2.m.daocloud.io\n腾讯云:https://mirror.ccs.tencentyun.com\n修改方式 打开你的terminal\n$ sudo nano /etc/default/docker  在最后一行加上\nDOCKER_OPTS=\u0026quot;--registry-mirror=站点地址\u0026quot;  回到terminal\n$ sudo systemctl daemon-reload $ sudo systemctl restart docker  Docker的一些坑 No Command Specified错误 解决链接:https://serverfault.com/questions/757210/no-command-specified-from-re-imported-docker-image-container\n在docker中export容器仅仅是将其文件系统给export出来，有很多信息都丢失了。因此如果要将已被冻结的image（原本是个container）给import回去，就必须要加一些东西来重构context。\n举个例子，假设我们要导入一个名为dump.tar的image文件。在用于构建dump.tar这个image的Dockerfile中有一句CMD [\u0026quot;/bin/bash\u0026rdquo;]，而这句话对于container正常运行起至关重要的作用，那就必须要用这种方式来导入这个image文件：\n$ sudo docker import \\ --change 'CMD [\u0026quot;bin/bash\u0026quot;]' \\ /path/to/dump.tar imagename:tagname  ","id":6,"section":"posts","summary":"Docker是什麼 Docker中文翻译为\u0026quot;码头搬运工人\u0026rdquo;，是一个开源软件。 Docker容器与虚拟机类似，但二者在原理上","tags":["工具"],"title":"關於Docker一些奇奇怪怪的東西","uri":"https://hinwai.top/2020/08/docker/","year":"2020"},{"content":"懶得上網找工具了，這裡是一些我備份在mega雲端硬碟上的link\nPWN IDA: https://mega.nz/file/DldDUAzQ#ZItMbE8UzDxLP-F_7HXYnfeyK4ENb35OLI_4mPqhWIQ\n","id":7,"section":"posts","summary":"懶得上網找工具了，這裡是一些我備份在mega雲端硬碟上的link PWN IDA: https://mega.nz/file/DldDUAzQ#ZItMbE8UzDxLP-F_7HXYnfeyK4ENb35OLI_4mPqhWIQ","tags":["工具"],"title":"一些常用工具","uri":"https://hinwai.top/2020/08/tools/","year":"2020"},{"content":"可能会存在一些不严谨的地方，望各位大佬指正Orz😬。\nOSI七层模型是ISO提出的一个试图使世界范围内的计算机互联的框架。看起来好像有点晦涩，那就用李大爷约王奶奶出来吃饭做个例子吧。\n李大爷搁家里无聊，于是打算约隔壁家的王奶奶出来吃饭🤔。 應用層 Application Layer 李大爷想约饭，自然就得要把想表达的意思通过一定的句法和结构（协议）组织成一段话，大概长这样：\n#李爷爷的内心独白 { \u0026quot;主语\u0026quot;: \u0026quot;李大爷\u0026quot;, \u0026quot;谓语\u0026quot;: \u0026quot;约\u0026quot;, \u0026quot;宾语\u0026quot;: \u0026quot;王奶奶\u0026quot;, \u0026quot;目的\u0026quot;: { \u0026quot;目的1\u0026quot;: \u0026quot;吃饭\u0026quot;, \u0026quot;目的2\u0026quot;: \u0026quot;跳广场舞\u0026quot; } }  你在浏览器搜索某个东西，点下回车键之后搜索的东西会被打包成HTTP报文、发邮件的时候可能会通过SMTP协议、连接服务器通过SSH协议等，这些都是“想法”级别的东西。\n表現層 Presentation Layer 想法有了，那就得用一种大家都能懂语言（中文也好洋文也好，反正听得懂就行），把想法给表达出来。\n在计算机中，则是用ASCII,UTF-8等将HTTP报文进行编码压缩加密 并转换成机器看得懂的二进制码。\n这决定了李大爷讲哪种语言王奶奶才能听得懂 表达的时候是否话中有话\nascii和utf8相当于电脑用的单词本\n會議層 Session Layer 确定各种对话参数建立并维护一个会话（确认别人是否有权和你对话 有没有冒充身份和你对话 在哪里对话 对话会不会被人窃听） 认证方式有challenge-response，我个人理解类似于这段对话\n# 你真的是李大爷吗？ # -啊这...那肯定是啊！ # 我们小学班主任是谁？ # -ehhh.好吧我是冒牌货  傳輸層 Transport Layer 在包中加上了传输表头。表头中包含端口号，使用的，如TCP、UDP之类的传输控制协议信息。\n句子结构已经整理好了，语言已经选好了（用中文），王爷爷就该因地制宜地选择到底是用不可靠的飞鸽传书，可靠的电话机电报机通信，还是去王奶奶家摁门铃面对面来进行会话了。\n網路層 Network Layer 在包中加上了网络表头等信息，其中包含终点的IP地址等互联网（IP）协议的信息。\n如果王爷爷是打电话的话，那就相当于从电话本中查询王奶奶电话号码。\n資料鏈結层 Data Link Layer 负责网络寻址、错误侦测和改错。当表头和表尾被加至数据包时，就形成了数据帧（Data Frame），包含了MAC地址等信息。\n数据链表头（DLH）包含了物理地址和错误的侦测、更改方法。 链表尾（DLT）是指示数据包末端的字符串，比如以太网、Wi-Fi和GPRS（通用分组无线服务）等。\n老电话不能直接打通，中间要进行人工转接，MAC地址这里相当于下一个邮电交换局的电话，下一个邮电交换局又打给下一个，以此类推直到王奶奶的电话响铃。\n在现代通讯中就相当于无线基站的地址。\n物理層 Physical Layer 负责在网络中传送数据帧（data frame)\n管理电脑通信设备和网络媒体中的互通 包括针脚、电压、集线器、网卡、中继器等底层物理网络设备。\n李爷爷和王奶奶的通话中则相当于电话机、邮电交换局等用于传输帧的通话基础设施的实体。\n总结 至此，李爷爷便完成了一次约王奶奶出门的通信过程咯🙌 不过OSI参考模型并没有提供一个可以实现的方法，仅仅描述了一些概念，以及制定了一些用来协调进程间通信标准。它并不是一个标准，而是一个在制定标准时所使用的概念性框架。\n","id":8,"section":"posts","summary":"可能会存在一些不严谨的地方，望各位大佬指正Orz😬。 OSI七层模型是ISO提出的一个试图使世界范围内的计算机互联的框架。看起来好像有点晦涩，","tags":["基础知识"],"title":"OSI七层模型的一些个人理解","uri":"https://hinwai.top/2020/08/osi/","year":"2020"},{"content":"說在前面 本文纯粹从技术角度出发，以学习nginx并进行相关实践为主要目的。\n請勿將本技術用於違法目的！用本文提到的技術進行違法犯罪而造成的不良後果或法律責任均與本文作者無關。 要準備的東西 PS：这只是我的配置：\n伺服器 搭载Ubuntu 18.04.05 LTS系统.\nv2ray\nnginx-1.14.0\nv2ray v2ray是一款代理软件.支持VMess,Shadowsocks等代理协议.关于更多v2ray的信息可以去官网了解.\n想偷懒的话可以直接下载别人写好的懒人脚本一键完成安装和配置.\n这里假设我们已经设置好了v2ray端口为10086,inbound为VMess协议,流量伪装方式为websocket,ws路径为/Abcde123/,关闭tls。\n这里可以关掉tls，因为在nginx转发中就已经提供了tls功能。\nSSL證書的獲取 首先上GoDaddy或者Namesilo买一个域名，这些网站上的域名一般都挺便宜的。\n我选择了将这些域名托管在Cloudflare上（要将域名提供商的NameServer改成Cloudflare的xx.ns.cloudflare.com）。\n然后更改DNS record，添加指向服务器IP的A记录等。\n这里假设域名为abc.top，下面将为其颁发证书\nssh连服务器，输入指令:\n$ curl https://get.acme.sh | bash $ acme.sh --issue -d abc.top --standalone ;此时证书已经颁发完毕并保存在了~/.acme.sh/abc.top/目录下 $ ... ;将证书复制保存到一个安全的地方就o啦  这里采用了\u0026ndash;standalone模式来脱机验证域名的ownership,当然你也可以用dns或者webroot模式来验证.说实话我用webroot方式出错了好多次2333333，当时啥也不会，还以为是证书的问题，然后折磨王地generate了证书又删掉又gen了好多回，结果被Let\u0026rsquo;s Encrypt（可以白嫖证书的良心CA）给限速了。\nPS:standalone验证的时候要记得把nginx关掉（让80端口开放）\n關於Nginx Nginx是一个免费、开源的异步框架网页服务器应用（u1s1 毛子开发的东西还挺管用，感兴趣的童鞋可以去了解一下Igor Sysoev这个人）。\nNginx可以用于反向代理(Reverse Proxy)，负载均衡(Load Balance)和HTTP缓存等目的。\n这里使用的主要是nginx的Reverse Proxy功能\n安裝方式： 大佬说过：效率至上，既然有包管理器了那干嘛还要用源码编译呢?\n这里我就用最简单粗暴的方法:apt 😌\n$ sudo apt-get install -y nginx  配置文件 根据官方文档中的说明，nginx的配置文件为nginx.conf\n我修改的配置文件路径为/etc/nginx/sites-enable/default\n因为这个文件最后都会被include到nginx.conf文件里头，所以可以直接修改这个default文件。\n下面是我的配置文件内容（和用Nginx配置HTTPS的配置文件内容大同小异）\nserver { listen 443 ssl; ssl on; ssl_protocols TLSv1 TLSv1.1 TLSv1.2; #指定多个TLS版本以增加兼容性 ssl_certificate /path/to/your.website.cer; #.cer文件是域名证书 ssl_certificate_key /path/to/your.website.key; #.key文件是域名私钥 #用acme.sh申请证书的时候不需要像网上说的那样还要再--install-cert一次 location /your_ws_path/ { proxy_pass http://127.0.0.1:10086/Abcde123/; #这里的ws路径可以理解成一个网站的uri proxy_redirect off; proxy_set_header Connection \u0026quot;upgrade\u0026quot;; proxy_set_header Upgrade $http_upgrade; proxy_set_header Host $http_host; proxy_http_version 1.1; #使得v2ray能将realip记录到access.log里 proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; } }  然后直接启动nginx即可\n客户端 客户端配置连接的时候需要将服务器端口改成443，并且将ws路径改成nginx的location块配置的路径名称（这里是your_ws_path）。\n总结 用nginx通过模拟HTTPS连接的方式对v2ray进行websocket流量转发能较好地伪装流量，并且还能在大多数情况下绕过运营商QoS，因此是一个不错的选择噢😉。\n","id":9,"section":"posts","summary":"說在前面 本文纯粹从技术角度出发，以学习nginx并进行相关实践为主要目的。 請勿將本技術用於違法目的！用本文提到的技術進行違法犯罪而造成的不良","tags":null,"title":"实战nginx转发v2ray流量","uri":"https://hinwai.top/2020/08/v2ray/","year":"2020"},{"content":"悄咪咪水一篇七夕节的文章\n今年你脫單了嗎 反正我是没有的555555（\n一早起床看了一下pyq，整个人🐸了。于是我决定关掉pyq直面这一卡车七彩狗粮甚至还给几条pyq点了个👍（做人连这点心态都没有怎么能行呢）。\n關於七夕節 史前时期（大概170万年前吧）的时候，人们就已经对星星产生了崇拜之情。渐渐地，有些人因此也就迷上了观星🔭，吃饱饭了就往天上看看（反正也没事干，吾等社畜甚慕之😩）。\n有一天他们发现在银河系两端有两颗特别的星星🌟，并且发现它们一年只见一次面，于是磕cp上了瘾的古人们不约而同地商量了一波，把这一天定成一个特殊的日子。（其实从天文学上来讲它们只能永远网络一线牵了。毕竟牛郎星在天鹰座，织女星在天琴座，这中间可隔着16光年呢😯）\n汉朝的时候，织女被神话并赋予以编织云雾的女神👸、妇女儿童守护神的形象。而到了宋代的时候，阴历七月初七祭祀活动渐渐地才开始流行起来。\n其他國家 日本的七夕节（平假:たなばた 罗马音:Tanabata）是国历的七月七号（日本其实也有阴历，只不过明治维新之后就废除了官方的使用，然后这些节日就转换成了国历）。即便是这样，有些地方七夕节过国历，有些地方还是过回农历（比如仙台七夕祭）。\nTanabata的庆祝仪式一般在七月份进行，有时候是八月份。如果那天下雨了，人们就会认为这些雨是织女由于无法见到牛郎而哭泣的眼泪。\n当今，Tanabata在日本成了一个表达心愿的节日活动（不只是爱情那么简单了，或许还有恭喜发财？233333）\n所以在今天，很多日本人会将自己的心愿写到卡片上，然后把卡片挂上许愿竹（下图），如果竹子不够挂了他们还可能会把卡片挂在树上。 後記 在宇宙中，总能遇到一颗星星，闪烁的是一眼便已经确认过的光芒，亦望天下有情人终成眷属👫。\n","id":10,"section":"posts","summary":"悄咪咪水一篇七夕节的文章 今年你脫單了嗎 反正我是没有的555555（ 一早起床看了一下pyq，整个人🐸了。于是我决定关掉pyq直面这一卡车七彩狗","tags":["吹水台"],"title":"七夕节","uri":"https://hinwai.top/2020/08/qixi/","year":"2020"},{"content":"大佬们:你用Markdown写blog像极了某kun打🏀\n關於我 我叫Hinux.😃\n某华南不用军训带学的学生,非计算机专业,喜欢唱跳rap .\n平时比较喜欢玩玩乐器🎸唱下歌仔什么的🎤\nLinux(Ubuntu)厨\n对于我来说Windows一般用来打游戏\n平時會寫些什麼呢？ 聊一些漫无边际的东西，还有偶尔share一些技术感想。偶尔也会记录一下心情啊或者有些挺有意思的所见所闻叭😉。\n關於我的小窩 本窝基于Hugo引擎搭建，使用的是xiaoheiAh大佬的Pure模板，遵循CC BY 4.0协议。\n算是在一次心血来潮中搭的吧（主要是想建个站玩玩哈哈哈）,本人技术还不够炉火纯青,有很多功能还没完善（大佬轻喷😣Orz）.\n","id":11,"section":"posts","summary":"大佬们:你用Markdown写blog像极了某kun打🏀 關於我 我叫Hinux.😃 某华南不用军训带学的学生,非计算机专业,喜欢唱跳rap . 平时","tags":["about-me"],"title":"My First Blog","uri":"https://hinwai.top/2020/08/my-first-blog/","year":"2020"}],"tags":[{"title":"about-me","uri":"https://hinwai.top/tags/about-me/"},{"title":"吹水台","uri":"https://hinwai.top/tags/%E5%90%B9%E6%B0%B4%E5%8F%B0/"},{"title":"基础知识","uri":"https://hinwai.top/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"},{"title":"工具","uri":"https://hinwai.top/tags/%E5%B7%A5%E5%85%B7/"},{"title":"疑难杂症","uri":"https://hinwai.top/tags/%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87/"}]}